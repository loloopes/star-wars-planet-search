{"version":3,"sources":["context/Context.js","context/Provider.js","components/Table.js","components/InputSearch.js","components/FilterSelect.js","components/Main.js","App.js","index.js"],"names":["Context","createContext","Provider","children","useState","planets","setPlanets","filterByName","name","filterByNumericValues","filters","setFilters","filteredPlanets","setFilteredPlanets","options1","setOptions1","useEffect","fetch","then","result","json","data","results","forEach","planet","residents","contextData","value","Table","useContext","colHead","length","Object","keys","map","column","index","key","values","info","InputSearch","type","onChange","target","data-testid","FilterSelect","setColumn","comparison","setComparison","setValue","removeUsedOptions","coluna","splice","indexOf","console","log","reduce","acc","compa","valor","filter","Number","option","onClick","Main","includes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25f4a466.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst Context = createContext();\n\nexport default Context;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport Context from './Context';\n\nfunction Provider({ children }) {\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n  });\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [options1, setOptions1] = useState(filters.options1);\n\n  function fetchPlanets() {\n    fetch('https://swapi-trybe.herokuapp.com/api/planets/')\n      .then((result) => result.json())\n      .then((data) => {\n        data.results.forEach((planet) => delete planet.residents);\n        setPlanets(data.results);\n      });\n  }\n\n  useEffect(() => {\n    fetchPlanets();\n  }, []);\n\n  const contextData = {\n    planets,\n    filters,\n    setFilters,\n    filteredPlanets,\n    setFilteredPlanets,\n    options1,\n    setOptions1,\n  };\n\n  return (\n    <Context.Provider value={ contextData }>\n      {children}\n    </Context.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: propTypes.node.isRequired,\n};\n\nexport default Provider;\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\n\nfunction Table() {\n  const { planets, filteredPlanets } = useContext(Context);\n\n  const colHead = planets.length > 0\n  && Object.keys(planets[0]).map((column, index) => <th key={ index }>{column}</th>);\n\n  return (\n    <table>\n      <thead>\n        <tr>{colHead}</tr>\n      </thead>\n      <tbody>\n        { filteredPlanets.map(((planet, index) => (\n          <tr key={ index }>\n            {Object.values(planet).map((info) => (\n              <td key={ info }>\n                {info}\n              </td>\n            ))}\n          </tr>))) }\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\n\nconst InputSearch = () => {\n  const {\n    filters,\n    setFilters,\n  } = useContext(Context);\n\n  function handleChange({ target: { value } }) {\n    setFilters({ ...filters, filterByName: { name: value } });\n  }\n\n  return (\n    <input\n      type=\"text\"\n      onChange={ handleChange }\n      data-testid=\"name-filter\"\n    />\n  );\n};\n\nexport default InputSearch;\n","import React, { useContext, useState, useEffect } from 'react';\nimport Context from '../context/Context';\n\nfunction FilterSelect() {\n  const { filters,\n    setFilters,\n    setFilteredPlanets,\n    planets,\n    filteredPlanets,\n  } = useContext(Context);\n\n  const { filterByNumericValues } = filters;\n\n  const options1 = [\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water',\n  ];\n  const options2 = ['maior que', 'menor que', 'igual a'];\n\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState(0);\n\n  // function handleChange({ target }) {\n  //   setFilters({ ...filters,\n  //     filterByNumericValues: [\n  //       {\n  //         ...filterByNumericValues[filterByNumericValues.length - 1],\n  //         [target.name]: target.value,\n  //       },\n  //     ] });\n  // }\n\n  // logica com a ajuda do Guilherme Costa =)\n  const removeUsedOptions = () => {\n    filterByNumericValues.forEach(({ column: coluna }) => {\n      options1.splice(options1.indexOf(coluna), 1);\n    });\n    return options1;\n  };\n\n  // function handleColumnChange = ({target}) => {\n  //   setFilters({\n  //     ...filters,\n  //     filterByNumericValues: [{\n  //       ...filterByNumericValues,\n  //       column: target.value,\n  //     }]\n  //   })\n  // }\n\n  const addFilter = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [...filterByNumericValues, { column, comparison, value }],\n    });\n  };\n\n  // function filterPlanets() {\n  //   // const { value } = filterByNumericValues[filterByNumericValues.length - 1];\n  //   switch (filterByNumericValues[filterByNumericValues.length - 1].comparison) {\n  //   case 'maior que':\n  //     return setFilteredPlanets(planets\n  //       .filter((planet) => Number(planet[filterByNumericValues[filterByNumericValues.length - 1].column])\n  //       > Number(filterByNumericValues[filterByNumericValues.length - 1].value)));\n  //   case 'menor que':\n  //     return setFilteredPlanets(planets\n  //       .filter((planet) => Number(planet[filterByNumericValues[filterByNumericValues.length - 1].column])\n  //       < Number(filterByNumericValues[filterByNumericValues.length - 1].value)));\n  //   case 'igual a':\n  //     return setFilteredPlanets(planets\n  //       .filter((planet) => Number(planet[filterByNumericValues[filterByNumericValues.length - 1].column])\n  //       === Number(filterByNumericValues[filterByNumericValues.length - 1].value)));\n  //   default:\n  //     return filteredPlanets;\n  //   }\n  // }\n\n  // {\n  //   if (!filterByNumericValues) {\n  //     return planets;\n  //   } switch (filterByNumericValues[filterByNumericValues.length -1].comparison) {\n  //     case:\n  //     default:\n  //       return planets,\n  //   }\n  // };\n  // logica desenvolvida com ajuda do Felipe Ventorim\n  useEffect(() => {\n    console.log('test');\n    setFilteredPlanets(\n      !filterByNumericValues.length\n        ? filteredPlanets\n        : filterByNumericValues\n          .reduce((acc, { column: coluna, comparison: compa, value: valor }) => (\n            acc.filter((planet) => {\n              switch (compa) {\n              case 'maior que':\n                return Number(planet[coluna]) > Number(valor);\n              case 'menor que':\n                return Number(planet[coluna]) < Number(valor);\n              case 'igual a':\n                return Number(planet[coluna]) === Number(valor);\n              default:\n                return false;\n              }\n            })\n          ), planets),\n    );\n  }, [filterByNumericValues]);\n\n  return (\n    <>\n      <select\n        name=\"column\"\n        onChange={ ({ target }) => setColumn(target.value) }\n        data-testid=\"column-filter\"\n      >\n        {removeUsedOptions()\n          .map((option) => <option key={ option } value={ option }>{option}</option>)}\n      </select>\n      <select\n        name=\"comparison\"\n        onChange={ ({ target }) => setComparison(target.value) }\n        data-testid=\"comparison-filter\"\n      >\n        {options2.map((option) => <option key={ option }>{option}</option>)}\n      </select>\n      <input\n        onChange={ ({ target }) => setValue(target.value) }\n        type=\"number\"\n        data-testid=\"value-filter\"\n        name=\"value\"\n      />\n      <button\n        onClick={ () => {\n          addFilter();\n          removeUsedOptions();\n        } }\n        type=\"button\"\n        data-testid=\"button-filter\"\n      >\n        OnOffFilter\n      </button>\n    </>\n  );\n}\n\nexport default FilterSelect;\n","import React, { useContext, useEffect } from 'react';\nimport Table from './Table';\nimport InputSearch from './InputSearch';\nimport Context from '../context/Context';\nimport FilterSelect from './FilterSelect';\n\nfunction Main() {\n  const { planets, filters, setFilteredPlanets } = useContext(Context);\n\n  useEffect(() => {\n    setFilteredPlanets(planets\n      .filter((planet) => planet.name.includes(filters.filterByName.name)));\n  }, [filters.filterByName.name, planets, setFilteredPlanets]);\n\n  return (\n    <>\n      <InputSearch />\n      <FilterSelect />\n      <Table />\n    </>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Provider from './context/Provider';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <Provider>\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}